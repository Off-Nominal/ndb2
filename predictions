BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2021-02-26', triggered_date = NOW() WHERE predictions.id = 473;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    473,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 473;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 474;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2021-02-26', triggered_date = NOW() WHERE predictions.id = 474;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    474,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 474;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 476;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 485;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2023-01-01', triggered_date = NOW() WHERE predictions.id = 485;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    485,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 485;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 539;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2021-04-09', triggered_date = NOW() WHERE predictions.id = 539;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    539,
    true,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 539;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 546;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 560;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2022-01-01', triggered_date = NOW() WHERE predictions.id = 560;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    560,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 560;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 560;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 561;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2022-01-01', triggered_date = NOW() WHERE predictions.id = 561;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    561,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 561;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 672;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2022-04-02', triggered_date = NOW() WHERE predictions.id = 672;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    672,
    true,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 672;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 708;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 708;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2023-01-01', triggered_date = NOW() WHERE predictions.id = 708;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    708,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 708;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 708;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 708;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 710;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2022-04-12', triggered_date = NOW() WHERE predictions.id = 710;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    710,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 710;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 710;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 749;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2021-09-03', triggered_date = NOW() WHERE predictions.id = 749;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    749,
    true,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 749;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 769;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2022-02-16', triggered_date = NOW() WHERE predictions.id = 769;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    769,
    true,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 769;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 792;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2022-11-16', triggered_date = NOW() WHERE predictions.id = 792;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    792,
    true,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 792;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 860;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2022-05-01', triggered_date = NOW() WHERE predictions.id = 860;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    860,
    true,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 860;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 930;
UPDATE predictions SET due_date = '2028-12-30' WHERE prediction_id = 930;
UPDATE predictions SET due_date = '2028-12-30' WHERE id = 930;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1113;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1114;
UPDATE predictions SET retired_date = '2023-02-09' WHERE predictions.id = 1113;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1113;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1114;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2023-02-11', triggered_date = NOW() WHERE predictions.id = 1114;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    1114,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 1114;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1143;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2023-03-09', triggered_date = NOW() WHERE predictions.id = 1143;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    1143,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 1143;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1146;
UPDATE predictions SET due_date = '2024-01-01' WHERE id = 1146;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1147;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2023-03-09', triggered_date = NOW() WHERE predictions.id = 1147;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    1147,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 1147;
COMMIT;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1148;
BEGIN;
UPDATE predictions SET triggerer_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9', closed_date = '2023-03-09', triggered_date = NOW() WHERE predictions.id = 1148;
INSERT INTO votes (
    user_id,
    prediction_id,
    vote,
    voted_date
  ) VALUES (
    '8397e07c-b6b7-4672-81fe-4d9e087e69f1',
    1148,
    false,
    NOW()
  );
UPDATE predictions SET judged_date = NOW() WHERE predictions.id = 1148;
C
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1191;
UPDATE predictions SET due_date = '2024-07-04' WHERE id = 1191;
UPDATE predictions SET due_date = '2024-07-04' WHERE id = 1203;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1203;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1204;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1203;
UPDATE predictions SET due_date = '2023-02-01' WHERE id = 1203;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1203;
UPDATE predictions SET retired_date = '2023-04-27' WHERE predictions.id = 1203;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1203;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 546;
select id, text from predictions where due_date < created_date;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1203;
UPDATE predictions SET due_date = '2023-04-28' WHERE id = 1203;
select id, text from predictions where due_date < created_date;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 710;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1191;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1203;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 79;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 103;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 357;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 388;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 403;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 415;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 490;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 547;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 577;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 577;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 584;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 584;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 615;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 743;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 850;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1109;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 129;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 130;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 129;
UPDATE predictions SET closed_date = '2020-06-26', judged_date = '2020-06-27' WHERE id = 129;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 129;
UPDATE predictions SET closed_date = '2020-06-27', judged_date = '2020-06-28' WHERE id = 129;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 129;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 130;
UPDATE predictions SET closed_date = '2020-06-27', judged_date = '2020-06-28' WHERE id = 130;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 130;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 173;
UPDATE predictions SET closed_date = '2020-07-14', judged_date = '2020-07-15' WHERE id = 173;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 173;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 189;
UPDATE predictions SET closed_date = '2020-07-31', judged_date = '2020-08-01' WHERE id = 189;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 189;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 189;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 190;
UPDATE predictions SET closed_date = '2020-07-31', judged_date = '2020-08-01' WHERE id = 190;
UPDATE predictions SET closed_date = '2020-07-31', judged_date = '2020-08-01' WHERE id = 260;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 260
;
UPDATE predictions SET closed_date = '2020-08-29', judged_date = '2020-08-30' WHERE id = 260;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 260
;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 273;
UPDATE predictions SET closed_date = '2020-09-11', judged_date = '2020-09-12' WHERE id = 273;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 276;
UPDATE predictions SET closed_date = '2020-09-12', judged_date = '2020-09-13' WHERE id = 276;
UPDATE predictions SET closed_date = '2020-09-12', judged_date = '2020-09-13' WHERE id = 277;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 360;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 360;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 276;
UPDATE predictions SET closed_date = '2020-12-10' WHERE id = 276;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 277;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 301;
UPDATE predictions SET closed_date = '2020-09-23', judged_date = '2020-09-24' WHERE id = 301;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 302;
UPDATE predictions SET closed_date = '2020-09-23', judged_date = '2020-09-24' WHERE id = 302;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 312;
UPDATE predictions SET closed_date = '2020-10-02', judged_date = '2020-10-03' WHERE id = 312;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 414;
UPDATE predictions SET closed_date = '2021-01-26', judged_date = '2021-01-27' WHERE id = 414;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 420;
UPDATE predictions SET closed_date = '2021-02-02', judged_date = '2021-02-03' WHERE id = 420;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 435;
UPDATE predictions SET closed_date = '2021-02-07', judged_date = '2021-02-08' WHERE id = 435;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 437;
UPDATE predictions SET closed_date = '2021-02-07', judged_date = '2021-02-08' WHERE id = 437;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 468;
UPDATE predictions SET closed_date = '2021-02-23', judged_date = '2021-02-24' WHERE id = 437;
UPDATE predictions SET closed_date = '2021-02-07', judged_date = '2021-02-08' WHERE id = 437;
UPDATE predictions SET closed_date = '2021-02-23', judged_date = '2021-02-24' WHERE id = 468;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 487;
UPDATE predictions SET closed_date = '2021-03-04', judged_date = '2021-03-05' WHERE id = 487;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 488;
UPDATE predictions SET closed_date = '2021-03-04', judged_date = '2021-03-05' WHERE id = 488;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 489;
UPDATE predictions SET closed_date = '2021-03-04', judged_date = '2021-03-05' WHERE id = 489;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 498;
UPDATE predictions SET closed_date = '2021-03-04', judged_date = '2021-03-05' WHERE id = 498;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 528;
UPDATE predictions SET closed_date = '2021-03-19', judged_date = '2021-03-20' WHERE id = 528;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 529;
UPDATE predictions SET closed_date = '2021-03-19', judged_date = '2021-03-20' WHERE id = 529;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 592;
UPDATE predictions SET closed_date = '2021-05-06', judged_date = '2021-05-07' WHERE id = 592;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 592;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 602;
UPDATE predictions SET closed_date = '2021-05-08', judged_date = '2021-05-09' WHERE id = 602;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 607;
UPDATE predictions SET closed_date = '2021-05-09', judged_date = '2021-05-10' WHERE id = 607;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 620;
UPDATE predictions SET closed_date = '2021-05-27', judged_date = '2021-05-28' WHERE id = 620;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 704;
UPDATE predictions SET closed_date = '2021-11-11', judged_date = '2021-11-12' WHERE id = 704;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 709;
UPDATE predictions SET closed_date = '2021-11-19', judged_date = '2021-11-20' WHERE id = 709;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 711;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 711;
UPDATE predictions SET closed_date = '2021-12-03', judged_date = '2021-12-04' WHERE id = 711;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 730;
UPDATE predictions SET closed_date = '2021-12-31', judged_date = '2022-01-01' WHERE id = 730;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 776;
UPDATE predictions SET closed_date = '2022-02-08', judged_date = '2022-02-09' WHERE id = 776;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 782;
UPDATE predictions SET closed_date = '2022-02-09', judged_date = '2022-02-10' WHERE id = 787
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 787;
UPDATE predictions SET closed_date = '2022-02-11', judged_date = '2022-02-12' WHERE id = 789;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 789;
UPDATE predictions SET closed_date = '2022-02-11', judged_date = '2022-02-12' WHERE id = 789;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 829;
UPDATE predictions SET closed_date = '2022-03-17', judged_date = '2022-03-18' WHERE id = 829;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 861;
UPDATE predictions SET closed_date = '2022-05-03', judged_date = '2022-05-04' WHERE id = 861;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 867;
UPDATE predictions SET closed_date = '2022-05-20', judged_date = '2022-05-21' WHERE id = 867;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 886;
UPDATE predictions SET closed_date = '2022-06-14', judged_date = '2022-06-15' WHERE id = 886;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 892;
UPDATE predictions SET closed_date = '2022-06-19', judged_date = '2022-06-20' WHERE id = 892;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 903;
UPDATE predictions SET closed_date = '2022-06-30', judged_date = '2022-07-01' WHERE id = 903;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1142;
UPDATE predictions SET closed_date = '2023-03-09', judged_date = '2023-03-10' WHERE id = 1142;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1142;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1145;
UPDATE predictions SET closed_date = '2023-03-09', judged_date = '2023-03-10' WHERE id = 1145;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 1179;
UPDATE predictions SET closed_date = '2023-04-18', judged_date = '2023-04-19' WHERE id = 1179;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 749;
UPDATE predictions SET closed_date = '2022-09-03' WHERE id = 749;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
SELECT prediction_id, created_date, due_date, closed_date, judged_date, status, text, predictor_id from enhanced_predictions ep WHERE ep.prediction_id = 360;
UPDATE predictions SET closed_date = '2020-12-10' WHERE id = 360;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 456;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 460;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 462;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 465;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 466;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 459;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 461;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
UPDATE predictions SET closed_date = '2021-02-19' WHERE id = 463;
select * from predictions where closed_date IS NOT NULL and closed_date <= created_date;
select * from predictions where closed_date IS NULL and due_date < NOW();
select * from predictions where closed_date IS NULL and due_date < NOW() and retired_date IS NULL;
\q
SELECT id, due_date FROM predictions WHERE due_date < NOW() AND triggered_date IS NULL AND retired_date IS NULL ORDER BY due_date ASC LIMIT 1;
SELECT id FROM predictions WHERE judged_date IS NULL AND triggered_date + '1 day' < NOW() ORDER BY due_date ASC LIMIT 1;
\q
select id, created_date, due_date, closed_date, judged_date from predictions where id = 413;
selects * from bets where prediction_id = 413;
select * from bets where prediction_id = 413;
select id, created_date, due_date, closed_date, judged_date, triggered_date from predictions where id = 413;
update predictions set closed_date = '2021-08-03' where id = 413;
select id, created_date, due_date, closed_date, judged_date, triggered_date from predictions where id = 413;
select id, created_date, due_date, closed_date, judged_date, triggered_date from predictions where id = 406;
select * from bets where prediction_id = 406;
\q
delete from predicitions where id = 1214;
delete from predictions where id = 1214;
delete from bets where id = 12524;
delete from bets where id = 12534;
delete from predictions where id = 1214;
\q
\c ndb2
\dv
\d predictions;
SELECT 
    p.id as prediction_id,
    p.user_id as predictor_id,
    p.text,
    p.created_date,
    p.due_date,
    p.closed_date,
    p.judged_date,
    p.retired_date,
    p.triggered_date,
    p.triggerer_id,
    s.id as season_id,
    (CASE
      WHEN p.retired_date IS NOT NULL THEN 'retired'
      WHEN p.judged_date IS NOT NULL THEN
        CASE 
          WHEN 
            (SELECT mode() WITHIN GROUP (order by votes.vote) FROM votes WHERE votes.prediction_id = p.id)
              THEN 'successful'
          ELSE 'failed'
        END
      WHEN p.closed_date IS NOT NULL THEN 'closed'
      ELSE 'open'
    END) as status,
  FROM predictions p
    LEFT JOIN seasons s ON 
    COALESCE(p.closed_date, p.due_date) >= s.start AND p.due_date < s.end
  ORDER BY ID;
  SELECT 
    p.id as prediction_id,
    p.user_id as predictor_id,
    p.text,
    p.created_date,
    p.due_date,
    p.closed_date,
    p.judged_date,
    p.retired_date,
    p.triggered_date,
    p.triggerer_id,
    s.id as season_id,
    (CASE
      WHEN p.retired_date IS NOT NULL THEN 'retired'
      WHEN p.judged_date IS NOT NULL THEN
        CASE 
          WHEN 
            (SELECT mode() WITHIN GROUP (order by votes.vote) FROM votes WHERE votes.prediction_id = p.id)
              THEN 'successful'
          ELSE 'failed'
        END
      WHEN p.closed_date IS NOT NULL THEN 'closed'
      ELSE 'open'
    END) as status
  FROM predictions p
    LEFT JOIN seasons s ON 
    COALESCE(p.closed_date, p.due_date) >= s.start AND p.due_date < s.end
  ORDER BY ID;
  SELECT 
    p.id as prediction_id,
    p.user_id as predictor_id,
    p.text,
    p.created_date,
    p.due_date,
    p.closed_date,
    p.judged_date,
    p.retired_date,
    p.triggered_date,
    p.triggerer_id,
    s.id as season_id,
    (CASE
      WHEN p.retired_date IS NOT NULL THEN 'retired'
      WHEN p.judged_date IS NOT NULL THEN
        CASE 
          WHEN 
            (SELECT mode() WITHIN GROUP (order by votes.vote) FROM votes WHERE votes.prediction_id = p.id)
              THEN 'successful'
          ELSE 'failed'
        END
      WHEN p.closed_date IS NOT NULL THEN 'closed'
      ELSE 'open'
    END) as status
  FROM predictions p
    LEFT JOIN seasons s ON 
    COALESCE(p.closed_date, p.due_date) >= s.start AND p.due_date < s.end
  ORDER BY p.id;
clear
  SELECT 
    p.id as prediction_id,
    p.user_id as predictor_id,
    p.text,
    p.created_date,
    p.due_date,
    p.closed_date,
    p.judged_date,
    p.retired_date,
    p.triggered_date,
    p.triggerer_id,
    s.id as season_id,
    (CASE
      WHEN p.retired_date IS NOT NULL THEN 'retired'
      WHEN p.judged_date IS NOT NULL THEN
        CASE 
          WHEN 
            (SELECT mode() WITHIN GROUP (order by votes.vote) FROM votes WHERE votes.prediction_id = p.id)
              THEN 'successful'
          ELSE 'failed'
        END
      WHEN p.closed_date IS NOT NULL THEN 'closed'
      ELSE 'open'
    END) as status
  FROM predictions p
    LEFT JOIN seasons s ON 
    COALESCE(p.closed_date, p.due_date) >= s.start AND p.due_date < s.end
  ORDER BY p.id;
  SELECT 
    p.id as prediction_id,
    p.user_id as predictor_id,
    p.text,
    p.created_date,
    p.due_date,
    p.closed_date,
    p.judged_date,
    p.retired_date,
    p.triggered_date,
    p.triggerer_id,
    s.id as season_id,
    (CASE
      WHEN p.retired_date IS NOT NULL THEN 'retired'
      WHEN p.judged_date IS NOT NULL THEN
        CASE 
          WHEN 
            (SELECT mode() WITHIN GROUP (order by votes.vote) FROM votes WHERE votes.prediction_id = p.id)
              THEN 'successful'
          ELSE 'failed'
        END
      WHEN p.closed_date IS NOT NULL THEN 'closed'
      ELSE 'open'
    END) as status
  FROM predictions p
    LEFT JOIN seasons s ON 
    COALESCE(p.closed_date, p.due_date) >= s.start AND p.due_date < s.end
  ORDER BY p.id;
\d predictions
select text from predictions where id = 1224;
select text from predictions_with_context where id = 1224;
select text from predictions_with_context where prediction_id = 1224;
REFRESH MATERIALIZED VIEW predictions_with_context;
select text from predictions_with_context where prediction_id = 1224;
select * from predictions_with_context ;
\dv
\dm
\d predictions_with_context 
select text from predictions_with_context where prediction_id = 1214;;
select * from predictions where id = 1214;
select id, text from predictions order by id DESC;
select id, text from predictions where id = 1225;
select prediction_id, text from predictions_with_context where prediction_id = 1225;
\d predictions
\d seasons
select * from predictions_with_context LIMIT 10;
select id, text, status, season_id from predictions_with_context ORDER BY ID DESC LIMIT 10
;
select * from enhanced_predictions where prediction_id = 1225;
select * from enhanced_predictions where prediction_id = 1224;
select * from enhanced_predictions where prediction_id = 1225;
select id, text, status, season_id from predictions_with_context where id = 1225;
\df
drop function insert_prediction ;
drop trigger prediction_insert 
;
drop trigger prediction_insert on predictions;
drop function insert_prediction ;
select id, text, status, season_id from predictions_with_context where id = 1225;
select id, text, status, season_id from predictions_with_context where id = 1230;
select * from seasons;
update predictions set due_date = '2023-05-14' where id = 1230;
select id, text, status, due_date, season_id from predictions_with_context where id = 1230;
select prediction_id, status, season_id from enhanced_predictions where prediction_id = 1230;
select id, status, season_id from predictions;
select id, status, season_id from predictions where id = 1230;
\d predictions;
select id, status, season_id from predictions where id = 1230;
select id, status, season_id from predictions where id = 1232;
select * from predictions;
select id, text, status, season_id from predictions where id = 1233;
select id, text, status, season_id from predictions where id = 1233;
select * from seasons
select id, text, status, season_id from predictions where id = 1234;
insert into seasons (name, start, end, payout_formula) values ('Future', '2023-10-01', '2024-01-01', '(ln($1/$2/2.0)/1.5)+1');
insert into seasons (name, start, "end", payout_formula) values ('Future', '2023-10-01', '2024-01-01', '(ln($1/$2/2.0)/1.5)+1');
select * from seasons;
select id, text, status, season_id from predictions where id = 1234;
insert into seasons (name, start, "end", payout_formula) values ('Future', '2023-10-01', '2024-01-01', '(ln($1/$2/2.0)/1.5)+1');
select id, text, status, season_id from predictions where id = 1234;
select * from seasons;
select id, text, status, season_id from predictions where id = 1234;
select * from seasons;
delete from seasons where id = 5;
\d predictions
EXPLAIN ANALYZE
SELECT
      'points' as type,
        (SELECT jsonb_agg(leaders_sum) FROM (
          WITH 
          users_scores_summary AS 
          (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10
        ) leaders_sum ) as leaders;
explain analyze
        SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10
;
        explain analyze
        WITH 
          users_scores_summary AS 
          (
        SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10;
\d users;
CREATE INDEX bets_user_id_idx ON bets (user_id);
        explain analyze
        WITH 
          users_scores_summary AS 
          (
        SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10;
drop index bets_user_id_idx;
CREATE INDEX bets_prediction_id_idx ON bets (prediction_id);
        explain analyze
        WITH 
          users_scores_summary AS 
          (
        SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10;
drop index bets_prediction_id_idx;
        explain analyze
        WITH 
          users_scores_summary AS 
          (
        SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10;
CREATE INDEX predictions_predictor_id_idx ON predictions (user_id);
        explain analyze
        WITH 
          users_scores_summary AS 
          (
        SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10;
drop index predictions_predictor_id_idx;
CREATE INDEX bets_prediction_id_idx ON bets (prediction_id);
        explain analyze
        WITH 
          users_scores_summary AS 
          (
        SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10;
EXPLAIN ANALYZE
SELECT
      'points' as type,
        (SELECT jsonb_agg(leaders_sum) FROM (
          WITH 
          users_scores_summary AS 
          (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id)
        SELECT
          better_id as id,
          discord_id,
          rank,
          points
        FROM users_scores_summary
        LIMIT 10
        ) leaders_sum ) as leaders;
\d users
select id from users where discord_id = '274725911415226369';
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
CREATE INDEX bets_user_id_idx ON bets (user_id);
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
CREATE INDEX bets_user_id_idx ON bets (user_id);
drop index bets_user_id_idx;
\d predictions
CREATE INDEX predictions_predictor_id_idx ON predictions (user_id);
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
\d predictions
drop index predictions_predictor_id_idx ;
\d predictionsq
create index predictions_status_idx ON predictions (id, status);
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
\d pred
\d predictions
drop index predictions_status_idx ;
\d bets
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
\d bets
create index bets_endorsed_idx on bets (endorsed);
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
q
drop index bets_endorsed_idx ;
drop index bets_endorsed_idx ;
\d bets
\d predictions
create index predictions_user_id_idx on predictions (user_id);
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
;
\d predictions;
create index predictions_status_idx on predictions (status);
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
\d predictions
drop index predictions_status_idx ;
drop index predictions_user_id_idx ;
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
create index predictions_status_open_idx on predictions (id) where status = 'open
;
;
'
;
\d predictions
drop index predictions_status_open_idx ;
create index predictions_status_open_idx on predictions (id) where status = 'open
;
'
;
\d predictions
drop index predictions_status_open_idx 
create index predictions_status_open_idx on predictions (id) where status = 'open';
drop index predictions_status_open_idx 
create index predictions_status_open_idx on predictions (id) where status = 'open';
create index predictions_status_open_idx on predictions (id) where status = 'open';
drop index predictions_status_open_idx 
;
create index predictions_status_open_idx on predictions (id) where status = 'open';
\d predictions
create index predictions_status_retired_idx on predictions (id) where status = 'retired';
create index predictions_status_closed_idx on predictions (id) where status = 'closed';
create index predictions_status_successful_idx on predictions (id) where status = 'successful';
create index predictions_status_failed_idx on predictions (id) where status = 'failed';
\d predictions
explain analyze
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(payout), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(payout), 0) DESC
        )
      FROM users u
      LEFT JOIN payouts ON payouts.better_id = u.id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT DESC,
            COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT ASC
        ) as rank,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'successful'))::INT
          as successful,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'failed'))::INT
          as failed,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'open' OR ep.status = 'closed'))::INT
          as pending,
        COUNT(DISTINCT ep.prediction_id) FILTER (WHERE (ep.status = 'retired'))::INT
          as retired
      FROM users u
      LEFT JOIN enhanced_predictions ep ON ep.predictor_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
                (eb.status = 'failed' AND eb.endorsed IS FALSE))
              )::INT DESC,
            COUNT(eb.bet_id) FILTER 
              (WHERE 
                ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
                (eb.status = 'failed' AND eb.endorsed IS TRUE))
              )::INT ASC
        ) as rank,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS TRUE) OR
            (eb.status = 'failed' AND eb.endorsed IS FALSE))
          )::INT as successful,
        COUNT(eb.bet_id) FILTER 
          (WHERE 
            ((eb.status = 'successful' AND eb.endorsed IS FALSE) OR
            (eb.status = 'failed' AND eb.endorsed IS TRUE))
          )::INT as failed,
        COUNT(eb.bet_id) FILTER 
          (WHERE (eb.status = 'open' OR eb.status = 'closed'))::INT as pending,
        COUNT(eb.bet_id) FILTER (WHERE eb.status = 'retired')::INT as retired
      FROM users u
      LEFT JOIN enhanced_bets eb ON eb.better_id = u.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed'))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_bets_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = '574439b0-dcc2-4a48-aca5-022ff2228a89'
      ) vote_sum) as votes;
\d predictions
drop index predictions_status_open_idx ;
drop index predictions_status_closed_idx ;
drop index predictions_status_retired_idx ;
drop index predictions_status_successful_idx ;
drop index predictions_status_failed_idx ;
\d predictions
\d votes
\d seasons
\d bets
DROP TRIGGER predictions_bets_wager ON predictions;
DROP FUNCTION refresh_wager;
ALTER TABLE bets
  DROP COLUMN wager;
update predictions set due_date = '2023-10-29' WHERE id = 1236;
update predictions set due_date = '2023-10-29' WHERE id = 1236;
update predictions set due_date = '2023-11-29' WHERE id = 1236;
\dt
\d predictions
drop trigger predictions_bets_wager on predictions;
\df
drop function refresh_wager_from_bets;
update predictions set due_date = '2023-10-29' where id = 1239;
select * from predictions where status ='successful' and predictor_id = '574439b0-dcc2-4a48-aca5-022ff2228a89;
'
;
select * from predictions where status ='successful' and user_id = '574439b0-dcc2-4a48-aca5-022ff2228a89';
\q
\c ndb2
select predictions.id, count(votes.id) from predictions join votes on votes.prediction_id = predictions.id order by count(votes.id);
select predictions.id, count(votes.id) from predictions join votes on votes.prediction_id = predictions.id group by predictions.id;
select predictions.id, count(votes.id) from predictions join votes on votes.prediction_id = predictions.id group by predictions.id order by count(votes.id);;
select predictions.id, count(votes.id) from predictions join votes on votes.prediction_id = predictions.id group by predictions.id order by count(votes.id) desc;
select predictions.id, count(votes.id) from predictions join votes on votes.prediction_id = predictions.id group by predictions.id order by count(votes.id) desc;
select predictions.id, count(bets.id) from predictions join bets on bets.prediction_id = predictions.id where predictions.status = 'successful' or predictions.status = 'failed' group by predictions.id order by count(bets.id) DESC;
\q
\q
\c ndb2
\d bets
\d predictions
\d bets
select id, date, closed_date from bets join predictions on bets.prediction_id = bets.id
;
select b.id, b.date, p.closed_date from bets b join predictions p on p.id = b.prediction_id WHERE b.date > p.closed_date;
select p.id, b.date, p.closed_date from bets b join predictions p on p.id = b.prediction_id WHERE b.date > p.closed_date;
\q
\q
\c ndb2
select p.id, b.date, p.closed_date from bets b join predictions p on p.id = b.prediction_id WHERE b.date > p.closed_date;
select id, due_date from predictions where id = 1183;
select p.id, b.date, p.closed_date from bets b join predictions p on p.id = b.prediction_id WHERE b.date > p.closed_date;
\l
\d migrations
\l
\q
SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'successful' AND p.season_id = 1)::INT DESC,
            COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'failed' AND p.season_id = 1)::INT ASC
        ) as rank,
        COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'successful' AND p.season_id = 1)::INT
          as successful,
        COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'failed' AND p.season_id = 1)::INT
          as failed,
        COUNT(DISTINCT p.id) FILTER (WHERE (p.status = 'open' OR p.status = 'closed') AND p.season_id = 1)::INT
          as pending,
        COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'retired' AND p.season_id = 1)::INT
          as retired
      FROM users u
      LEFT JOIN predictions p ON p.user_id = u.id
      GROUP BY u.id;
SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) DESC
        )
      FROM users u
      LEFT JOIN bets ON bets.user_id = u.id
      JOIN predictions p ON p.id = bets.prediction_id
      GROUP BY u.id
;
select points, rank from (SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) DESC
        )
      FROM users u
      LEFT JOIN bets ON bets.user_id = u.id
      JOIN predictions p ON p.id = bets.prediction_id
      GROUP BY u.id) us where us.better_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9';
select row_to_json(score_sum) FROM (select points, rank from (SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) DESC
        )
      FROM users u
      LEFT JOIN bets ON bets.user_id = u.id
      JOIN predictions p ON p.id = bets.prediction_id
      GROUP BY u.id) us where us.better_id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9') score_sum;
WITH 
      users_scores_summary 
        AS (
    SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) DESC
        )
      FROM users u
      LEFT JOIN bets ON bets.user_id = u.id
      JOIN predictions p ON p.id = bets.prediction_id
      GROUP BY u.id),
      users_predictions_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'successful' AND p.season_id = 1)::INT DESC,
            COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'failed' AND p.season_id = 1)::INT ASC
        ) as rank,
        COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'successful' AND p.season_id = 1)::INT
          as successful,
        COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'failed' AND p.season_id = 1)::INT
          as failed,
        COUNT(DISTINCT p.id) FILTER (WHERE (p.status = 'open' OR p.status = 'closed') AND p.season_id = 1)::INT
          as pending,
        COUNT(DISTINCT p.id) FILTER (WHERE p.status = 'retired' AND p.season_id = 1)::INT
          as retired
      FROM users u
      LEFT JOIN predictions p ON p.user_id = u.id
      GROUP BY u.id),
      users_bets_summary 
        AS (
    SELECT
        u.id,
        u.discord_id,
        RANK () OVER (
          ORDER BY 
            COUNT(b.id) FILTER 
              (WHERE 
                ((p.status = 'successful' AND b.endorsed IS TRUE) OR
                (p.status = 'failed' AND b.endorsed IS FALSE)) AND p.season_id = 1
              )::INT DESC,
            COUNT(b.id) FILTER 
              (WHERE 
                ((p.status = 'successful' AND b.endorsed IS FALSE) OR
                (p.status = 'failed' AND b.endorsed IS TRUE)) AND p.season_id = 1
              )::INT ASC
        ) as rank,
        COUNT(b.id) FILTER 
          (WHERE 
            ( (
                (p.status = 'successful' AND b.endorsed IS TRUE) OR
                (p.status = 'failed' AND b.endorsed IS FALSE)
              ) AND b.valid IS TRUE
            ) AND p.season_id = 1
          )::INT as successful,
        COUNT(b.id) FILTER 
          (WHERE 
            ( (
                (p.status = 'successful' AND b.endorsed IS FALSE) OR
                (p.status = 'failed' AND b.endorsed IS TRUE)
              ) AND b.valid IS TRUE
            ) AND p.season_id = 1
          )::INT as failed,
        COUNT(b.id) FILTER 
          (WHERE (p.status = 'open' OR p.status = 'closed') AND p.season_id = 1)::INT as pending,
        COUNT(b.id) FILTER (WHERE p.status = 'retired')::INT as retired,
        COUNT(b.id) FILTER (WHERE b.valid IS FALSE AND p.season_id = 1)::INT as invalid
      FROM users u
      LEFT JOIN bets b ON b.user_id = u.id
      JOIN predictions p ON b.prediction_id = p.id
      GROUP BY u.id),
      users_votes_summary 
        AS (
    SELECT
        u.id,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS TRUE AND ev.season_id = 1))::INT
          as sycophantic,
        COUNT(ev.id) FILTER (WHERE (ev.popular_vote IS FALSE AND ev.season_id = 1))::INT
          as contrarian,
        COUNT(ev.id) FILTER (WHERE (ev.status = 'closed' AND ev.season_id = 1))::INT
          as pending
      FROM users u
      LEFT JOIN enhanced_votes ev ON ev.voter_id = u.id
      GROUP BY u.id)
    SELECT
      
    (SELECT row_to_json(season_sum) FROM (
      SELECT id, name, start, "end" FROM seasons WHERE seasons.id = 1
    ) season_sum) as season,
  
      (SELECT row_to_json(score_sum) FROM (
        SELECT points, rank FROM users_scores_summary us WHERE us.better_id  = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9'
      ) score_sum) as score,
      (SELECT row_to_json(pred_sum) FROM (
        SELECT successful, failed, pending, retired, rank FROM users_predictions_summary WHERE id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9'
      ) pred_sum) as predictions,
      (SELECT row_to_json(bet_sum) FROM (
        SELECT successful, failed, pending, retired, invalid, rank FROM users_bets_summary WHERE id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9'
      ) bet_sum) as bets,
      (SELECT row_to_json(vote_sum) FROM (
        SELECT sycophantic, contrarian, pending FROM users_votes_summary WHERE id = 'fd004038-e1e9-4c20-b3ca-0fe6b99cebe9'
      ) vote_sum) as votes;
select * from users where discord_id = '6345345345';
SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(bets.payout)${seasonFilter}, 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(bets.payout)${seasonFilter}, 0) DESC
        )
      FROM users u
      LEFT JOIN bets ON bets.user_id = u.id
      JOIN predictions p ON p.id = bets.prediction_id
      GROUP BY u.id;
SELECT
        u.id as better_id,
        u.discord_id,
        COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) as points,
        RANK () OVER (
          ORDER BY 
            COALESCE(SUM(bets.payout) FILTER (WHERE p.season_id = 1), 0) DESC
        )
      FROM users u
      LEFT JOIN bets ON bets.user_id = u.id
      JOIN predictions p ON p.id = bets.prediction_id
      WHERE u.id = '59d77de0-78ee-4800-87ab-1a378a23c432'
      GROUP BY u.id;
\d bets
\q
select * from bets where wager <0 AND valid = true;
\q
select * from seasons;
select * from seasons;
update seasons set payout_formula = '(ln($1/$2/2.0)/1.5)+1' where id = 1;
\d enhanced_predictions 
drop view enhanced_predictions 
;
CREATE OR REPLACE VIEW enhanced_predictions AS
  WITH current_season_payout_formula AS (
    SELECT payout_formula
    FROM seasons
    WHERE NOW() >= seasons.start AND NOW() < seasons.end
    LIMIT 1
  )
  SELECT
    p.id as prediction_id,
    p.user_id as predictor_id,
    p.text,
    p.created_date,
    p.due_date,
    p.closed_date,
    p.judged_date,
    p.retired_date,
    p.triggered_date,
    p.triggerer_id,
    p.season_id,
    p.status,
    (SELECT COUNT(id) FILTER (WHERE b.endorsed) FROM bets b WHERE b.prediction_id = p.id) as endorsements,
    (SELECT 
      COALESCE(
        NULLIF(
          (SELECT SUM(b.wager) FROM bets b WHERE b.prediction_id = p.id AND b.endorsed IS TRUE), 0
          ), 0
      )
    ) as total_endorsement_wagers,
    (SELECT COUNT(id) FILTER (WHERE NOT b.endorsed) FROM bets b WHERE b.prediction_id = p.id) as undorsements,
    (SELECT 
      COALESCE(
        NULLIF(
          (SELECT SUM(b.wager) FROM bets b WHERE b.prediction_id = p.id AND b.endorsed IS FALSE), 0
          ), 0
      )
    ) as total_undorsement_wagers,
    (SELECT SUM(b.wager) FROM bets b WHERE b.prediction_id = p.id) as total_wager,
    (SELECT 
      ROUND(
        calc_payout_ratio(
          (SELECT SUM(b.wager) 
            FROM bets b WHERE b.prediction_id = p.id)::INT,
          (COALESCE(
            NULLIF(
              (SELECT 
                  SUM(b.wager) 
                FROM bets b 
                WHERE b.prediction_id = p.id 
                AND b.endorsed IS TRUE
              ),
              0
            ),
            0.5
          ))::INT,
          COALESCE((SELECT payout_formula FROM seasons WHERE seasons.id = season_id), (SELECT payout_formula FROM current_season_payout_formula))
        ), 2
      )
    ) as endorsement_ratio,
    (SELECT 
      ROUND(
        calc_payout_ratio(
          (SELECT SUM(b.wager)
            FROM bets b WHERE b.prediction_id = p.id)::INT,
          (COALESCE(
            NULLIF(
              (SELECT 
                  SUM(b.wager)
                FROM bets b 
                WHERE b.prediction_id = p.id 
                AND b.endorsed IS FALSE
              ),
              0
            ),
            0.5
          ))::INT,
          COALESCE((SELECT payout_formula FROM seasons WHERE seasons.id = season_id), (SELECT payout_formula FROM current_season_payout_formula))
        ), 2
      )
    ) as undorsement_ratio
  FROM predictions p
  ORDER BY p.id;
select * from migrations
;
\d bets
\d predictions
update seasons set payout_formula = '1' where id = 1;
select * from predictions where NOT EXISTS (select * from bets where bets.prediction_id = predictions.id);
update seasons set payout_formula = '(ln($1/$2/2.0)/1.5)+1' where id = 1;
select * from enhanced_predictions where prediction_id = 1208;
select 0.5::INT;
\df
drop function calc_payout_ratio 
;
drop function calc_payout_ratio(integer, integer, text);
\df
drop function calc_payout_ratio(integer, integer, text);
\df
drop function calc_payout_ratio(integer, numeric, text);
/df
\df
\d bets
\d users
\d bets
\d bets
\df
select count(*) from bets;
select count(*) from bets;
select count(*) from bets
;
select count(*) from bets
;
select count(*) from bets
;
select id from users where discord_id = '752568804613029900';
\d users
\d users
select count(*) users;
select * from users;
select count(*) from users;
select * from users where discord_id = '128444890869661698';
INSERT INTO users (discord_id) VALUES ('128444890869661698') ON CONFLICT (discord_id) DO NOTHING RETURNING id;
select count(*) from users;
INSERT INTO users (is, discord_id) VALUES ('7fc43926-5634-4186-a067-1d3670f21545', '128444890869661698') ON CONFLICT (discord_id) DO NOTHING RETURNING id;
INSERT INTO users (id, discord_id) VALUES ('7fc43926-5634-4186-a067-1d3670f21545', '128444890869661698') ON CONFLICT (discord_id) DO NOTHING RETURNING id;
select count(*) from users;
select * from users;
select * from users;
select count(*) from users;
select count(*) from bets;
\d bets
select count(*) from bets;
select count(*) from bets;
select count(*) from bets;
select count(*) from bets;
select * from users where is = 'f08e3955-e44b-4d16-9585-3d40a66f82cd';
select * from users where id = 'f08e3955-e44b-4d16-9585-3d40a66f82cd';
select count(*) from bets
;
select * from bets where wager <0;
select * from bets where wager <0 and valid is true;
\q
select count(*) from bets;
select count(*) from bets;
select count(*) from bets;
\q
\c ndb2
select count(*) from bets
;
\q
select id from predictions where status = 'open' and due_date > '2023-06-02' order by due_date ASC;
select * from seasons
;
select id, season_id from enhanced_predictions where status = 'open' and season_id = 1;
select prediction_id, season_id from enhanced_predictions where status = 'open' and season_id = 1;
select prediction_id, season_id from enhanced_predictions where status = 'open' and season_id = 2;
\d enhanced_predictions 
\dt
\dv
\d enhanced_predictions 
select prediction_id, season_id, total_wager, total_endorsement_wagers, total_undorsement_wagers from enhanced_predictions where status = 'open' and season_id = 2;
\df
\df
select prediction_id, season_id, total_wager, total_endorsement_wagers, total_undorsement_wagers from enhanced_predictions where status = 'open' and season_id = 2;
select * from migrations;
select * from seasons
;
select prediction_id, season_id, total_wager, total_endorsement_wagers, total_undorsement_wagers from enhanced_predictions where status = 'open' and season_id = 3;
update seasons set payout_formula = '(ln($1/$2/2.0)/1.5)+2' where id = 3;
select * from seasons
;
select prediction_id, season_id, total_wager, total_endorsement_wagers, total_undorsement_wagers from enhanced_predictions where status = 'open' and season_id = 3;
update seasons set payout_formula = '(ln($1/$2/2.0)/1.5)+1' where id = 3;
select prediction_id, season_id, total_wager, total_endorsement_wagers, total_undorsement_wagers from enhanced_predictions where status = 'open' and due_date > '2023-10-02';
\d seasons
select * from seasons;
\d bets
select prediction_id, season_id, total_wager, total_endorsement_wagers, total_undorsement_wagers from enhanced_predictions where status = 'open' and season_id = 2;
select * from seasons;
select * from seasons;
select prediction_id, season_id, total_wager, total_endorsement_wagers, total_undorsement_wagers from enhanced_predictions where status = 'successful' and season_id = 1;
update seasons set payout_formula = 1.5 where id = 1;
select * from seasons;
\d seasons
\d predictions
\d bets
\d
\d seasons
\d users
\s predictions
