name: Test Suite

on:
  workflow_dispatch:

jobs:
  # Job 1: Initialize Test Database
  setup-test-database:
    runs-on: ubuntu-latest
    outputs:
      database-ready: ${{ steps.setup-db.outputs.ready }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test database
        working-directory: ./docker/test-database
        run: |
          docker compose up -d

          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          until docker compose exec -T ndb2-test-database pg_isready -U test_user -d ndb2_test; do
            echo "Database is not ready yet. Waiting..."
            sleep 2
          done

          # Load the schema
          echo "Loading database schema..."
          docker compose exec -T ndb2-test-database psql -U test_user -d ndb2_test -f /docker-entrypoint-initdb.d/schema.sql

          echo "Test database is ready!"

      - name: Verify database connection
        run: |
          # Test database connectivity
          docker run --rm --network host postgres:16-alpine pg_isready -h localhost -p 5433 -U test_user -d ndb2_test

          # Test a simple query
          docker run --rm --network host postgres:16-alpine psql -h localhost -p 5433 -U test_user -d ndb2_test -c "SELECT 1 as test;"

      - name: Set database ready output
        id: setup-db
        run: echo "ready=true" >> $GITHUB_OUTPUT

  # Job 2: Run Tests
  run-tests:
    needs: setup-test-database
    runs-on: ubuntu-latest

    services:
      # Use the same PostgreSQL service configuration for consistency
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ndb2_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Wait for database
        run: |
          until pg_isready -h localhost -p 5433 -U test_user -d ndb2_test; do
            echo "Waiting for database..."
            sleep 2
          done

      - name: Initialize database schema
        run: |
          PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d ndb2_test -f db/schema.sql

      - name: Run tests
        working-directory: ./api
        env:
          TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5433/ndb2_test
          NODE_ENV: test
        run: |
          pnpm test

      - name: Run database tests
        working-directory: ./api
        env:
          TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5433/ndb2_test
          NODE_ENV: test
        run: |
          pnpm test:db
